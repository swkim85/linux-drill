
# Clang

clang  helloworld.c  -o helloworld
clang -emit-llvm  -c helloworld.c -o helloworld.bc 
clang -emit-llvm -S helloworld.c  -o helloworld.ll
clang  helloworld.ll  -o helloworld2
llvm-as  helloworld.ll  -o helloworld.bc
llvm-dis  helloworld.bc  -o helloworld.ll
llc  helloworld.bc  -o helloworld.s


clang -emit-llvm -S ex1.c  -o ex1.ll
vi -d helloworld.ll ex1.ll 
clang -Xclang -ast-dump -fsyntax-only  helloworld.c

# Lexer

clang++ -g -O3 tut1.cpp  -o tut1

# Parser and AST

clang++ -g -O3 tut2.cpp `llvm-config --cxxflags --ldflags --system-libs --libs core` -o tut2

# Optimization, JIT

clang++ -g -O3 tut3.cpp `llvm-config --cxxflags --ldflags --system-libs --libs core orcjit native` -o tut3

# control flow  if/then/else for

gcc -c -fpic star.c
gcc -shared -o libstar.so star.o

clang++ -g -O3 `llvm-config --cxxflags --ldflags --system-libs --libs core orcjit native` \
   tut5.cpp -o tut5 -lstar -L.

export LD_LIBRARY_PATH=.
./tut5

# user-defined operator

clang++ -g -O3 `llvm-config --cxxflags --ldflags --system-libs --libs core orcjit native` \
   tut6.cpp -o tut6 -lstar -L.

export LD_LIBRARY_PATH=.
./tut6

# variables

clang++ -g -O3 `llvm-config --cxxflags --ldflags --system-libs --libs core orcjit native` -lstar -L. \
   tut7.cpp -o tut7 
export LD_LIBRARY_PATH=.
./tut7

# compile to object code

clang++ -g -O3 `llvm-config --cxxflags --ldflags --system-libs --libs core orcjit native` \
   tut8.cpp -o tut8 

./tut8 < average.kal
file output.o
clang++ average_main.cpp output.o -o average_main 
./average_main

# debug info

clang++ -g -O3 `llvm-config --cxxflags --ldflags --system-libs --libs core orcjit native` \
   tut9.cpp -o tut9 



