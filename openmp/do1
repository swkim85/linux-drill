
$ gcc -g  -o thread1  thread1.c   -pthread
$ ./thread1
Hello message from a thread
main program exit.


$ gcc -g  -o  thread2  thread2.c  -pthread
$ ./thread2
main program exit.
Hello message from a thread  <-- main thread 가 종료된 이후에는 출력되지 않음



$ gcc -g  -o  thread3  thread3.c  -pthread
$ ./thread3
child thread start.
pthread_detach.
child thread exit.
main program exit.



gcc -o rdtsc.o  -c rdtsc.c


gcc -g  -o thread_example  thread_example.c  -pthread
gcc -g  -o thread_example2  thread_example2.c  -pthread

export OMP_NUM_THREADS=2
gcc -g -fopenmp -o hello_omp  hello_omp.c rdtsc.o --save-temps

#  gdb ./hello_omp


OMP_NUM_THREADS=2   ./hello_omp
OMP_NUM_THREADS=4   ./hello_omp

gcc -g -fopenmp -o private private.c --save-temps
gcc -g -fopenmp -o private2 private2.c --save-temps
gcc -g -fopenmp -o private3 private3.c --save-temps
gcc -g -fopenmp -o private3b private3b.c --save-temps
gcc -g -fopenmp -o private4 private4.c --save-temps

gcc -g -fopenmp -o scope scope.c --save-temps
./scope

gcc -g -fopenmp -o loop  loop.c --save-temps
./loop

gcc -g -o futex_wake futex_wake.c --save-temps


